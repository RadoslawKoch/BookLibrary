/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rkoch.book.library.services.integration;

import com.rkoch.book.library.entities.Book;
import com.rkoch.book.library.entities.BookData;
import com.rkoch.book.library.entities.BookOrder;
import com.rkoch.book.library.entities.CoverType;
import com.rkoch.book.library.entities.search.BookDataSearchCriteria;
import com.rkoch.book.library.exceptions.BookNotAvailableException;
import com.rkoch.book.library.exceptions.BookRemovalException;
import com.rkoch.book.library.exceptions.EntityNotFoundException;
import com.rkoch.book.library.repositories.impl.BookDataRepository;
import com.rkoch.book.library.repositories.impl.BookOrderRepository;
import com.rkoch.book.library.repositories.impl.BookRepository;
import com.rkoch.book.library.repositories.impl.CustomerRepository;
import com.rkoch.book.library.services.definitions.BookDataServiceDefinition;
import com.rkoch.book.library.services.definitions.BookServiceDefinition;
import com.rkoch.book.library.services.definitions.OrderBookServiceDefinition;
import com.rkoch.book.library.services.impl.BookDataService;
import com.rkoch.book.library.services.impl.BookService;
import com.rkoch.book.library.services.impl.OrderBookService;
import com.rkoch.book.library.services.mocks.TestData;
import java.time.Year;
import java.util.List;
import org.junit.After;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * @author rkoch
 */
public class MainIntegrationTest {
 
    private BookServiceDefinition bookService;
    
    private BookDataServiceDefinition bookDataService;
    
    private OrderBookServiceDefinition orderService;
    
    @Before
    public void setup(){
        
        this.orderService = new OrderBookService(
                BookRepository.getInstance(),
                BookOrderRepository.getInstance(),
                CustomerRepository.getInstance());
        
        this.bookService = 
                
                new BookService(BookDataRepository.getInstance(),BookRepository.getInstance());
        
        this.bookDataService = 
                
                new BookDataService(BookDataRepository.getInstance(),BookRepository.getInstance(),BookOrderRepository.getInstance());
        
        this.bookService.add(TestData.GET_BOOK);
        this.bookService.add(TestData.LENT_BOOK);
        
        
    }
    
    @After
    public void cleanUp(){
        TestData.GET_BOOK.setAvaliable(true);
        TestData.LENT_BOOK.setAvaliable(false);
    }
    
    @Test
    public void POINT_6_addNewBookToLibrary() 
            throws EntityNotFoundException{
        long isbn = 56594133l;
        String title = "Java for Beginners";
        String author = "Jan Kowalski";
        BookData data = new BookData(isbn,author,title);
        Book book = new Book(data,CoverType.SOFT);
        book = this.bookService.add(book);
        assertNotNull(this.bookService.get(book.getId()));
        System.out.println("-------------------------------\nID generated by system is: ".concat(book.getId()+""));
    }
    
    @Test
    public void POINT_7_deleteExistingBook() 
            throws BookRemovalException{
        Book book = this.bookService.delete(TestData.GLOBAL_ID);
        assertEquals(book,TestData.GET_BOOK);
    }
    
    @Test(expected=BookRemovalException.class)
    public void POINT_7_deleteLentBook() 
            throws BookRemovalException{
        this.bookService.delete(TestData.LENT_ID);
    }
    
    @Test(expected=BookRemovalException.class)
    public void POINT_7_deleteInexistingBook() 
            throws BookRemovalException{
        this.bookService.delete(1562626959l);
    }
    
    @Test
    public void POINT_7_listAllPositionsAvailableInLibrary(){
        List<BookData> allPositions = this.bookDataService.get();
        System.out.println("-------------------------------\n");
        allPositions.forEach(x->System.out.println(x));
    }
    
    @Test
    public void POINT_8_searchBookByTitleAuthorAndYear(){
        BookDataSearchCriteria criterias = new BookDataSearchCriteria();
        criterias.setAuthor("Jan");
        criterias.setTitle("Java");
        criterias.setYear(Year.of(2019));
        List<BookData> books = this.bookDataService.search(criterias);
        assertFalse(books.isEmpty());
        System.out.println("-------------------------------\nFound book is ".concat(books.get(0).toString()));
    }
    
    @Test
    public void POINT_8_searchBookByTitle(){
        BookDataSearchCriteria criterias = new BookDataSearchCriteria();
        criterias.setTitle("Świat");
        List<BookData> books = this.bookDataService.search(criterias);
        assertFalse(books.isEmpty());
        System.out.println("-------------------------------\nFound book is ".concat(books.get(0).toString()));
    }
    
    @Test
    public void POINT_8_searchBookByTitleAndAuthor(){
        BookDataSearchCriteria criterias = new BookDataSearchCriteria();
        criterias.setTitle("Świat");
        criterias.setAuthor("Clarkson");
        List<BookData> books = this.bookDataService.search(criterias);
        assertFalse(books.isEmpty());
        System.out.println("-------------------------------\nFound book is ".concat(books.get(0).toString()));
    }
    
    @Test
    public void POINT_9_rentBookWithIsbn() 
            throws BookNotAvailableException{
        BookOrder order = this.orderService.orderBookByIsbn(TestData.EXISTING_BOOK_ISBN, TestData.GET_CUSTOMER);
        assertTrue(!order.getBook().isAvaliable() &&
                    order.getCustomer().equals(TestData.GET_CUSTOMER));
    }
    
        @Test(expected=BookNotAvailableException.class)
    public void POINT_9_rentBookWithIsbnThrowsBookNotAvailableException() 
            throws BookNotAvailableException{
        this.orderService.orderBookByIsbn(TestData.LENT_ISBN, TestData.GET_CUSTOMER);
    }
    
    @Test
    public void POINT_9_rentBookWithId() 
            throws BookNotAvailableException{
        
        BookOrder order = this.orderService.orderBook(9l, TestData.GET_CUSTOMER);
        assertTrue(!order.getBook().isAvaliable() &&
                    order.getCustomer().equals(TestData.GET_CUSTOMER));
    }
    
    @Test(expected=BookNotAvailableException.class)
    public void POINT_9_rentBookWithIdThrowsBookNotAvailableException() 
            throws BookNotAvailableException{
        this.orderService.orderBook(TestData.LENT_ID, TestData.GET_CUSTOMER);
    }
    
    @Test
    public void POINT_10_getBookDetails() 
            throws EntityNotFoundException{
        Book book = this.bookService.get(2l);
        System.out.println("-------------------------------\nDisplay Book details\n----------------\n".concat(book.toString()));
        if(!book.getOrders().isEmpty()){
          System.out.println("lent by: ".concat(book.getOrders().get(book.getOrders().size()-1)+""));  
        }
         
    }  
     
}
